<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="truffle" ?>
	<title>Truffle v4.0.6</title>
	<para>
		Truffle 是 solidity 开发框架，
		<ulink url="http://truffleframework.com">http://truffleframework.com</ulink>
	</para>

	<section id="truffle.setup">
		<title>安装 Truffle </title>
		<para>安装truffle</para>
		<screen>
			<![CDATA[
sudo npm install -g truffle
			]]>
		</screen>
	</section>

	<section id="truffle.develop">
		<title>开发环境</title>
		<section>
			<title>truffle develop</title>
			<para>truffle develop 是 truffle 自带的开发环境。</para>
		</section>
		<section>
			<title>Ganache</title>
			<para>truffle develop 使用起来并不直观，还有另一个开发环境是 Ganache，Ganache有命令行版本和图形界面版本。下面是命令行版本安装方法：</para>
			<screen>
			<![CDATA[
sudo npm install -g ganache-cli
			]]>
			</screen>
			<para>
				图形界面版本这里下载
				<ulink url="http://truffleframework.com/ganache/" />
			</para>
			<para>图形界面交互性相比命令行比较好，推荐使用。你能在界面上直接查看账号，区块，交易，日志等等。</para>

		</section>
		<section>
			<title>testrpc</title>
			<para>由于truffle 4.0 自带开发环境(truffle develop)，所以本章不在使用 testrpc(不建议使用)，如果仍需要testrpc请参考下面安装方法：</para>
			<screen>
			<![CDATA[
# 安装testrpc
sudo npm install -g ethereumjs-testrpc
			]]>
			</screen>
		</section>
		
	</section>
	<section id="truffle.boxes">
		<title>TRUFFLE BOXES</title>
		<para>
			Truffle Boxes
			<ulink url="http://truffleframework.com/boxes/" />
			是一些有用的实例，学习 truffle 开发是供开发者参考学习。
		</para>
		<para>使用下面命令下载例子</para>
		<screen>
		<![CDATA[
truffle unbox webpack
		]]>
		</screen>
	</section>
	<section id="truffle.tutorial">
		<title>Truffle 快速入门</title>
		<section>
			<title>Ubuntu 环境</title>
			<section id="truffle.develop">
				<title>启动开发环境</title>
				<para>truffle 自带一个开发环境</para>
				<screen>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project %  truffle develop
Truffle Develop started at http://localhost:9545/

Accounts:
(0) 0x627306090abab3a6e1400e9345bc60c78a8bef57
(1) 0xf17f52151ebef6c7334fad080c5704d77216b732
(2) 0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef
(3) 0x821aea9a577a9b44299b9c15c88cf3087f3b5544
(4) 0x0d1d4e623d10f9fba5db95830f7d3839406c6af2
(5) 0x2932b7a2355d6fecc4b5c0b6bd44cc31df247a2e
(6) 0x2191ef87e392377ec08e7c08eb105ef5448eced5
(7) 0x0f4f2ac550a1b4e2280d04c21cea7ebd822934b5
(8) 0x6330a553fc93768f612722bb8c2ec78ac90b3bbc
(9) 0x5aeda56215b167893e80b4fe645ba6d5bab767de

Private Keys:
(0) c87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3
(1) ae6ae8e5ccbfb04590405997ee2d52d2b330726137b875053c36d94e974d162f
(2) 0dbbe8e4ae425a6d2687f1a7e3ba17bc98c673636790f1b8ad91193c05875ef1
(3) c88b703fb08cbea894b6aeff5a544fb92e78a18e19814cd85da83b71f772aa6c
(4) 388c684f0ba1ef5017716adb5d21a053ea8e90277d0868337519f97bede61418
(5) 659cbb0e2411a44db63778987b1e22153c086a95eb6b18bdf89de078917abc63
(6) 82d052c865f5763aad42add438569276c00d3d88a2d062d36b2bae914d58b8c8
(7) aa3680d5d48a8283413f7a108367c7299ca73f553735860a87b08f39395618b7
(8) 0f62d96d6675f32685bbdb8ac13cda7c23436f63efbb9d07700d8669ff12b7c4
(9) 8d5366123cb560bb606379f90a0bfd4769eecc0557f1b362dcae9012b548b1e5

Mnemonic: candy maple cake sugar pudding cream honey rich smooth crumble sweet treat

truffle(develop)> 
			
			]]>
				</screen>
				<para>truffle develop 的作用于 testrpc 类似。</para>
				<screen>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project % testrpc 
EthereumJS TestRPC v6.0.3 (ganache-core: 2.0.2)

Available Accounts
==================
(0) 0xb5fd43ee8fa5ce1db9a30a25ba385ee3bfc72966
(1) 0xf5a732345734e1f0f49cbadb145a20d1e1a44b95
(2) 0x834fcd8c55fdf21fd14c82e9a1ef5d3636a2fed6
(3) 0x5aa4d047d85727309d3ca653c83c3bb0ecd18903
(4) 0xb4db2dede86f4539e56ac4438f6e36f09c307e46
(5) 0x8da382b1a10ab2f1dc149e19fda228a07c78935c
(6) 0xb290297e89b52713548ff93e5fc23bc3c4183dde
(7) 0x546183289bd4d9d33a3aee0ee663c0729926e583
(8) 0xca58321e442533b7f827e6e8976e1905acd15214
(9) 0xe2c0b336bbb03564204e15a2cb7744564a53efcc

Private Keys
==================
(0) ff32f7a06e2fb26b51a745c1e428c60df92c0f9bb3301b19a5b7e0cdfaae521a
(1) cdbfe40321b6ade8a246748df1c48a738b8a531aee4d1f60a45bfd7f941e0064
(2) 7092117c2d7832980945e18645a60a1ed0e59261d040749f8b5202c2fc653d74
(3) f329657c9ad808e9f794a7462a1a9c276266343d5ced263ab618b6a19d6857c1
(4) 1221766592618add3a57ab109f00efcc70867dd8a9b10a0f7ea75c2b619edfc3
(5) c27005d6c3581193124c84766cc0b1cc318cb201b7d00b1035f4a4c7767ba790
(6) 6b7f43dca1dcc00203b751191096bb0602e17a9a94dcee8b846329efa703cea9
(7) 41be5971d71935bc88c3cf8aefd78ed3188c8721b7134cda3b25d353faf05d4f
(8) bd4c9d512a4f2da2cdcd9e4f89c049e3e7ac81bf57a05369997c2f13e793bebb
(9) 04196d803f743cc1fd021e7d02d5a552f14ab9826ccd4d4b265ff96c45169d2c

HD Wallet
==================
Mnemonic:      confirm shift cable melody caught swing erode language spend victory conduct van
Base HD Path:  m/44'/60'/0'/0/{account_index}

Listening on localhost:8545			
			]]>
				</screen>
			</section>
			<section id="truffle.init">
				<title>创建项目</title>
				<screen>
			<![CDATA[
cd ~/ethereum
mkdir truffle-project
cd truffle-project 
truffle init			
			]]>
				</screen>
				<para>操作演示</para>
				<screen>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project % truffle init
Downloading...
Unpacking...
Setting up...
Unbox successful. Sweet!

Commands:

  Compile:        truffle compile
  Migrate:        truffle migrate
  Test contracts: truffle test
  
neo@netkiller ~/ethereum/truffle-project % tree 
.
|-- contracts
|   `-- Migrations.sol
|-- migrations
|   `-- 1_initial_migration.js
|-- test
|-- truffle-config.js
`-- truffle.js

3 directories, 4 files			
			]]>
				</screen>
				<para>目录结构简单说明如下：</para>
				<literallayout>
			<![CDATA[
contract/ - Truffle默认的合约文件存放地址。
migrations/ - 存放发布脚本文件
test/ - 用来测试应用和合约的测试文件
truffle.js - Truffle的配置文件

app/ - 需要用户创建，应用文件运行的默认目录。			
			]]>
				</literallayout>
			</section>
			<section id="mycontracts">
				<title>创建合约</title>
				<programlisting>
			<![CDATA[
pragma solidity ^0.4.18;

contract Netkiller {
    string name;
    int num;
    function Netkiller() public{
        name = "default";
        num = 1;
    }
    function setName(string _name) public{
        name = _name;
    }
    function getName() public view returns(string){
        return name;
    }
    function setNum(int n) public{
        num = n;
    }
    function addNum(int m) public view returns(int res){
        res = m + num;
    }
}

			]]>
				</programlisting>
				<programlisting>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project % vim migrations/2_initial_migration.js

var Netkiller = artifacts.require("./Netkiller.sol");

module.exports = function(deployer) {
  deployer.deploy(Netkiller);
};
			]]>
				</programlisting>
			</section>
			<section id="truffle.js">
				<title>配置 Truffle</title>
				<para>打开文件 truffle.js </para>
				<programlisting>
			<![CDATA[
module.exports = {
  // See <http://truffleframework.com/docs/advanced/configuration>
  // to customize your Truffle configuration!
};			
			]]>
				</programlisting>
				<para>修改为</para>
				<screen>
			<![CDATA[
module.exports = {
  // See <http://truffleframework.com/docs/advanced/configuration>
  // to customize your Truffle configuration!
			
  networks: {
    development: {
      host: "localhost",
      port: 9545,
      network_id: "*" // Match any network id
    }
  }	
  		
};	
			]]>
				</screen>
			</section>
			<section id="truffle.compile">
				<title>编译智能合约</title>
				<screen>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project % truffle compile
Compiling ./contracts/Migrations.sol...
Compiling ./contracts/Netkiller.sol...
Writing artifacts to ./build/contracts
			]]>
				</screen>
				<para>truffle默认只会编译最后一次修改过的合约文件, 这是为了减少比重复编译。"--all"选项,可以强制编译所有文件。
				</para>
				<para>编译结果</para>
				<screen>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project % find build 
build
build/contracts
build/contracts/Migrations.json
build/contracts/Netkiller.json
			]]>
				</screen>
			</section>
			<section id="truffle.migrate">
				<title>migrate</title>
				<screen>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project % truffle migrate      
Using network 'development'.

Network up to date.			
			]]>
				</screen>
			</section>
		</section>

		<section id="truffle.mac">
			<title>Mac 环境</title>
			<para>Mac 环境</para>
			<screen>
		<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % node --version
v9.5.0
		
neo@MacBook-Pro ~/ethereum/truffle % npm version
{ npm: '5.6.0',
  ares: '1.13.0',
  cldr: '32.0.1',
  http_parser: '2.7.0',
  icu: '60.2',
  modules: '59',
  napi: '2',
  nghttp2: '1.29.0',
  node: '9.5.0',
  openssl: '1.0.2n',
  tz: '2017c',
  unicode: '10.0',
  uv: '1.19.1',
  v8: '6.2.414.46-node.18',
  zlib: '1.2.11' }		
		
neo@MacBook-Pro ~/ethereum/truffle % truffle version
Truffle v4.0.6 (core: 4.0.6)
Solidity v0.4.19 (solc-js)		
		]]>
			</screen>
			<para>创建项目并初始化</para>
			<screen>
		<![CDATA[
mkdir -p ~/ethereum/truffle
cd 	ethereum/truffle
truffle init	
		]]>
			</screen>

			<para>truffle 自带一个开发环境</para>
			<screen>
		<![CDATA[
neo@netkiller ~/ethereum/truffle-project %  truffle develop
Truffle Develop started at http://localhost:9545/

Accounts:
(0) 0x627306090abab3a6e1400e9345bc60c78a8bef57
(1) 0xf17f52151ebef6c7334fad080c5704d77216b732
(2) 0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef
(3) 0x821aea9a577a9b44299b9c15c88cf3087f3b5544
(4) 0x0d1d4e623d10f9fba5db95830f7d3839406c6af2
(5) 0x2932b7a2355d6fecc4b5c0b6bd44cc31df247a2e
(6) 0x2191ef87e392377ec08e7c08eb105ef5448eced5
(7) 0x0f4f2ac550a1b4e2280d04c21cea7ebd822934b5
(8) 0x6330a553fc93768f612722bb8c2ec78ac90b3bbc
(9) 0x5aeda56215b167893e80b4fe645ba6d5bab767de

Private Keys:
(0) c87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3
(1) ae6ae8e5ccbfb04590405997ee2d52d2b330726137b875053c36d94e974d162f
(2) 0dbbe8e4ae425a6d2687f1a7e3ba17bc98c673636790f1b8ad91193c05875ef1
(3) c88b703fb08cbea894b6aeff5a544fb92e78a18e19814cd85da83b71f772aa6c
(4) 388c684f0ba1ef5017716adb5d21a053ea8e90277d0868337519f97bede61418
(5) 659cbb0e2411a44db63778987b1e22153c086a95eb6b18bdf89de078917abc63
(6) 82d052c865f5763aad42add438569276c00d3d88a2d062d36b2bae914d58b8c8
(7) aa3680d5d48a8283413f7a108367c7299ca73f553735860a87b08f39395618b7
(8) 0f62d96d6675f32685bbdb8ac13cda7c23436f63efbb9d07700d8669ff12b7c4
(9) 8d5366123cb560bb606379f90a0bfd4769eecc0557f1b362dcae9012b548b1e5

Mnemonic: candy maple cake sugar pudding cream honey rich smooth crumble sweet treat

truffle(develop)> 
			
		]]>
			</screen>

			<para>创建合约文件 contracts/Greeter.sol</para>
			<screen>
		<![CDATA[
pragma solidity ^0.4.20;

contract Greeter         
{
    address creator;     
    string greeting;     

    function Greeter() public   
    {
        creator = msg.sender;
        greeting = "default";
    }

    function greet() constant public returns (string)          
    {
        return greeting;
    }
    
    function setGreeting(string _newgreeting) public 
    {
        greeting = _newgreeting;
    }
       
    function kill() public
    { 
        if (msg.sender == creator)
            selfdestruct(creator);

    }

}		
		]]>
			</screen>
			<para> 创建部署文件 migrations/2_initial_migration.js</para>
			<screen>
		<![CDATA[
var Greeter = artifacts.require("./Greeter.sol");

module.exports = function(deployer) {
  deployer.deploy(Greeter);
};
		]]>
			</screen>
			<para>打开文件 truffle.js </para>
			<programlisting>
			<![CDATA[
module.exports = {
  // See <http://truffleframework.com/docs/advanced/configuration>
  // to customize your Truffle configuration!
};			
			]]>
			</programlisting>
			<para>修改为</para>
			<screen>
			<![CDATA[
module.exports = {
  // See <http://truffleframework.com/docs/advanced/configuration>
  // to customize your Truffle configuration!
			
  networks: {
    development: {
      host: "localhost",
      port: 9545,
      network_id: "*" // Match any network id
    }
  }	
  		
};	
			]]>
			</screen>
			<para>编译并部署合约</para>
			<screen>
		<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % truffle compile          
Compiling ./contracts/Greeter.sol...
Writing artifacts to ./build/contracts

neo@MacBook-Pro ~/ethereum/truffle % truffle migrate --reset     
Using network 'development'.

Running migration: 1_initial_migration.js
  Replacing Migrations...
  ... 0xddeac9a1c57772df50064f11227fcb5515e54a3e88e15843f5c0bc1b55a0dad7
  Migrations: 0x2c2b9c9a4a25e24b174f26114e8926a9f2128fe4
Saving successful migration to network...
  ... 0x9b51540f5a7d75a8fc920e3e5e4ec66792ba31fd006bd176901f0e6347af2dba
Saving artifacts...
Running migration: 2_initial_migration.js
  Deploying Greeter...
  ... 0x312ead931bbe4b288315317bdf6735ba4fe4f30c20382f085ca27be345819983
  Greeter: 0xfb88de099e13c3ed21f80a7a1e49f8caecf10df6
Saving successful migration to network...
  ... 0x69eaa7ed49cc72426706d54c4f52ba70b742ed6910f1223eb0df5f250b4b8ec3
Saving artifacts...
		
		]]>
			</screen>
			<para>测试脚本</para>
			<programlisting>
		<![CDATA[
Greeter.deployed().then(instance => console.log(instance.address))
		
var contract;
Greeter.deployed().then(function(instance){contract= instance;});
contract.greet();
contract.setGreeting("http://www.netkiller.cn")
contract.greet();		
		]]>
			</programlisting>
			<para>进入控制台，交互执行上面程序</para>
			<screen>
		<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % truffle console
truffle(development)>

truffle(development)> Greeter.deployed().then(instance => console.log(instance.address))
0x82d50ad3c1091866e258fd0f1a7cc9674609d254
undefined
truffle(development)> var contract;
undefined
truffle(development)> Greeter.deployed().then(function(instance){contract= instance;});
undefined
truffle(development)> contract.greet();
'default'
truffle(development)> contract.setGreeting("http://www.netkiller.cn")
{ tx: '0xa5cbfba78c84415517740a482c2bf2208da0c6b0ecabcd5c22db2c85749041c8',
  receipt: 
   { transactionHash: '0xa5cbfba78c84415517740a482c2bf2208da0c6b0ecabcd5c22db2c85749041c8',
     transactionIndex: 0,
     blockHash: '0x557758e0d9b1ef81f41728cb92f43041d009751d5ce5e2e4424f7fb90f52041a',
     blockNumber: 16,
     gasUsed: 34206,
     cumulativeGasUsed: 34206,
     contractAddress: null,
     logs: [],
     status: 1 },
  logs: [] }
truffle(development)> contract.greet();
'http://www.netkiller.cn'
		]]>
			</screen>

		</section>
	</section>
	<section id="truffle.command">
		<title>Truffle 命令详解</title>
		<literallayout>
		<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % truffle help
Truffle v4.0.6 - a development framework for Ethereum

Usage: truffle <command> [options]

Commands:
  init      Initialize new and empty Ethereum project
  compile   Compile contract source files
  migrate   Run migrations to deploy contracts
  deploy    (alias for migrate)
  build     Execute build pipeline (if configuration present)
  test      Run JavaScript and Solidity tests
  debug     Interactively debug any transaction on the blockchain (experimental)
  opcode    Print the compiled opcodes for a given contract
  console   Run a console with contract abstractions and commands available
  develop   Open a console with a local development blockchain
  create    Helper to create new contracts, migrations and tests
  install   Install a package from the Ethereum Package Registry
  publish   Publish a package to the Ethereum Package Registry
  networks  Show addresses for deployed contracts on each network
  watch     Watch filesystem for changes and rebuild the project automatically
  serve     Serve the build directory on localhost and watch for changes
  exec      Execute a JS module within this Truffle environment
  unbox     Download a Truffle Box, a pre-built Truffle project
  version   Show version number and exit

See more at http://truffleframework.com/docs		
		]]>
		</literallayout>
		<section id="truffle.version">
			<title>version</title>
			<para>输出版本号然后退出。</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % truffle version
Truffle v4.0.6 (core: 4.0.6)
Solidity v0.4.19 (solc-js)
			]]>
			</screen>
		</section>
		<section>
			<title>Truffle console 控制台</title>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % truffle console
truffle(development)>		
			]]>
			</screen>
		</section>
		<section id="truffle.create">
			<title>create</title>
			<section>
				<title>contract 创建合约</title>
				<screen>
				<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % truffle create contract MyContract
neo@MacBook-Pro ~/ethereum/truffle % cat contracts/MyContract.sol 
pragma solidity ^0.4.4;

contract MyContract {
  function MyContract() {
    // constructor
  }
}				
				]]>
				</screen>
			</section>
			<section>
				<title>test 创建单元测试</title>
				<screen>
				<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % truffle create test MyTest
neo@MacBook-Pro ~/ethereum/truffle % cat test/my_test.js
contract('MyTest', function(accounts) {
  it("should assert true", function(done) {
    var my_test = MyTest.deployed();
    assert.isTrue(true);
    done();
  });
});
		
				]]>
				</screen>
			</section>
		</section>
		<section>
			<title>test</title>
			<para>运行测试</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % truffle test          
Using network 'development'.



  Contract: Migrations
    1) should assert true
    > No events were emitted


  0 passing (31ms)
  1 failing

  1) Contract: Migrations should assert true:
     ReferenceError: Migrations is not defined
      at Context.<anonymous> (test/migrations.js:3:22)
			]]>
			</screen>
			<para>运行单个测试文件</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % truffle test test/migrations.js			
			]]>
			</screen>
		</section>
		<section id="truffle.watch">
			<title>watch</title>
			<para>启动后监控文件系统的边龙并自动构建项目。</para>
			<screen>
			<![CDATA[
truffle watch			
			]]>
			</screen>
		</section>
	</section>
	<section id="truffle.contract">
		<title>合约开发</title>
		<section>
			<title>构造方法</title>
			<para>在 Truffer 中部署构造方法需要参数传递例子如下，MyContract 需要传递参数 _name：</para>
			<programlisting>
			<![CDATA[
pragma solidity ^0.4.19;

contract MyContract {

    string name;

    function MyContract(string _name) public{
        name = _name;
    }

    function getName() public view returns (string) {
        return name;
    }
}
			]]>
			</programlisting>
			<para>migrations/3_initial_migration.js</para>
			<programlisting>
			<![CDATA[
var MyContract = artifacts.require("./MyContract.sol");

module.exports = function(deployer) {
  deployer.deploy(MyContract,"Netkiller");
};			
			]]>
			</programlisting>
			<para>给构造方法传递变量的方法是 deployer.deploy(MyContract,arg1, arg2, ...); arg1
				是传递的参数。
			</para>
			<para>多个合约传递方法是：</para>
			<programlisting>
			<![CDATA[
deployer.deploy([
  [ContractA, arg1, arg2, ...],
  ContractB,
  [ContractC, arg1]
]);			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="truffle.console">
		<title>truffle console</title>
		<section>
			<title>实例化合约</title>
			<screen>
			<![CDATA[
var contract;
Conference.deployed().then(function(instance){contract=instance;});
			]]>
			</screen>
		</section>
		<section>
			<title>访问 public 变量</title>
			<screen>
			<![CDATA[
truffle(development)> contract.quota.call().then(console.log);
BigNumber { s: 1, e: 1, c: [ 50 ] }
undefined			
			]]>
			</screen>
		</section>
		<section>
			<title>调用 public 函数</title>
			<screen>
			<![CDATA[
var contract;
Conference.deployed().then(function(instance){contract=instance;});
contract.buyTicket();
			]]>
			</screen>
		</section>

	</section>
	<section id="zeppelin.solidity">
		<title>Zeppelin Solidity - OpenZeppelin is a library for writing secure Smart Contracts on Ethereum.</title>
		<para>OpenZeppelin is an open framework of reusable and secure smart contracts in the Solidity language.</para>
		<para>
			网站：
			<ulink url="https://openzeppelin.org">https://openzeppelin.org</ulink>
		</para>
		<para>
			Github:
			<ulink url="https://github.com/OpenZeppelin/zeppelin-solidity">https://github.com/OpenZeppelin/zeppelin-solidity</ulink>
		</para>
	</section>
	<section id="infura">
		<title>infura</title>
		<para><ulink url="https://infura.io/" /></para>
		<para>SCALABLE BLOCKCHAIN INFRASTRUCTURE</para>
		<para>We provide secure, reliable, and scalable access to Ethereum and IPFS.</para>
		<section id="">
			<title>注册账号</title>
			<para><para><ulink url="https://infura.io/signup" /></para></para>
			<para>输入用户名和邮箱即可注册</para>
			<graphic format="png" fileref="../../images/ethereum/infura/signup.png" width="1024" srccredit="netkiller" />
			<para>这些地址你需要牢记</para>
			<graphic format="png" fileref="../../images/ethereum/infura/network.png" width="1024" srccredit="netkiller" />
			
			<literallayout>
			<![CDATA[
NETWORK		DESCRIPTION			URL
Mainnet		production network	https://mainnet.infura.io/CsS9shwaAab0z7B4LP2d
Ropsten		test network			https://ropsten.infura.io/CsS9shwaAab0z7B4LP2d
INFURAnet	test network			https://infuranet.infura.io/CsS9shwaAab0z7B4LP2d
Kovan		test network			https://kovan.infura.io/CsS9shwaAab0z7B4LP2d
Rinkeby		test network			https://rinkeby.infura.io/CsS9shwaAab0z7B4LP2d
IPFS			gateway				https://ipfs.infura.io			
			]]>
			</literallayout>
			<para>这是你的 api key CsS9shwaAab0z7B4LP2d 请保存好</para>
			<para>Mainnet 是以太坊主网</para>
			<para>IPFS 是一个分布式区中心化的文件系统。</para>
		</section>
		<section id="infura.api">
			<title>infura 接口</title>
			<section id="">
				<title></title>
				<screen>
				<![CDATA[
$ curl -X POST -H "Content-Type: application/json" \
  --data '{"jsonrpc": "2.0", "id": 1, "method": "eth_blockNumber", "params": []}' \
  "https://mainnet.infura.io/CsS9shwaAab0z7B4LP2d"
				]]>
				</screen>
			</section>
			<section id="">
				<title>INFURA API</title>
				<screen>
				<![CDATA[
https://api.infura.io/v1/jsonrpc/mainnet/eth_blockNumber?token=CsS9shwaAab0z7B4LP2d				
				]]>
				</screen>
			</section>
		</section>
		<section id="infura.truffle">
			<title>配置 Truffle</title>
			<para>安装 truffle-hdwallet-provider</para>
			<screen>
			<![CDATA[
$ npm install truffle-hdwallet-provider			
			]]>
			</screen>
			<para>修改 truffle.js 文件</para>
			<programlisting>
			<![CDATA[
var HDWalletProvider = require("truffle-hdwallet-provider"); 

// infura 为你提供的 apikey 请与你申请到的 key 保持一致
var infura_apikey = "CsS9shwaAab0z7B4LP2d";
 
// 你以太坊钱包地址
var mnemonic = "0xB94054c174995AE2A9E7fcf6c7924635FBa8ECF7"; 

module.exports = {
  networks: {
    development: {
      host: "127.0.0.1",
      port: 7545,
      network_id: "*"
    },
    private: {
      host: "localhost",
      port: 8545,
      network_id: "*" // Match any network id
    },
    ropsten: {
      provider: new HDWalletProvider(mnemonic, "https://ropsten.infura.io/"+infura_apikey),
      network_id: 3,
      gas: 3012388,
      gasPrice: 30000000000
    },
    main: {
      provider: new HDWalletProvider(mnemonic, "https://mainnet.infura.io/"+infura_apikey),
      network_id: 3,
      gas: 3012388,
      gasPrice: 1000000000
    }
  }
};

			]]>
			</programlisting>
			<para>部署合约到 ropsten 测试网， 在命令行输入如下命令，通过 --network 设置发布的目标网络：</para>
			<screen>
			<![CDATA[
truffle migrate --network ropsten			
			]]>
			</screen>
			<para>主网络发布</para>
			<screen>
			<![CDATA[
truffle migrate --network main
			]]>
			</screen>
		</section>
	</section>
	
</chapter>	