<?xml version="1.0" encoding="UTF-8"?>
<chapter id="solidity">
	<title>智能合约语言 Solidity</title>
	<subtitle>本文作者最近在找工作，有意向致电 13113668890</subtitle>
	<info>
		<keywordset>
			<keyword>ethereum</keyword>
			<keyword>geth</keyword>
			<keyword>browser-solidity</keyword>
			<keyword>solidity</keyword>
		</keywordset>
	</info>
	<para>Solidity 是什么？Solidity是以太坊智能合约的编程语言。</para>

	<section id="truffle">
		<title>Truffle</title>
		<para>Truffle 是 solidity 开发框架</para>
		<section id="truffle.setup">
			<title>安装 Truffle</title>
			<screen>
			<![CDATA[
# 安装 Nodejs
curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -
sudo apt-get install -y nodejs
			
# 安装truffle
sudo npm install -g truffle

# 安装testrpc
sudo npm install -g ethereumjs-testrpc
			]]>
			</screen>
		</section>
		<section id="truffle.init">
			<title>创建项目</title>
			<screen>
			<![CDATA[
cd ~/ethereum
mkdir truffle-project
cd truffle-project 
truffle init			
			]]>
			</screen>
			<para>操作演示</para>
			<screen>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project % truffle init
Downloading...
Unpacking...
Setting up...
Unbox successful. Sweet!

Commands:

  Compile:        truffle compile
  Migrate:        truffle migrate
  Test contracts: truffle test
  
neo@netkiller ~/ethereum/truffle-project % tree 
.
|-- contracts
|   `-- Migrations.sol
|-- migrations
|   `-- 1_initial_migration.js
|-- test
|-- truffle-config.js
`-- truffle.js

3 directories, 4 files			
			]]>
			</screen>
		</section>
		<section id="mycontracts">
			<title>创建合约</title>
			<programlisting>
			<![CDATA[
pragma solidity ^0.4.18;

contract Netkiller {
    string name;
    int num;
    function Netkiller() public{
        name = "default";
        num = 1;
    }
    function setName(string _name) public{
        name = _name;
    }
    function getName() public view returns(string){
        return name;
    }
    function setNum(int n) public{
        num = n;
    }
    function addNum(int m) public view returns(int res){
        res = m + num;
    }
}

			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project % vim migrations/2_initial_migration.js

var Netkiller = artifacts.require("./Netkiller.sol");

module.exports = function(deployer) {
  deployer.deploy(Netkiller);
};
			]]>
			</programlisting>
		</section>
		<section id="truffle.js">
			<title>配置 Truffle</title>
			<para>打开文件 truffle.js </para>
			<programlisting>
			<![CDATA[
module.exports = {
  // See <http://truffleframework.com/docs/advanced/configuration>
  // to customize your Truffle configuration!
};			
			]]>
			</programlisting>
			<para>修改为</para>
			<screen>
			<![CDATA[
module.exports = {
  // See <http://truffleframework.com/docs/advanced/configuration>
  // to customize your Truffle configuration!
			
  networks: {
    development: {
      host: "localhost",
      port: 8545,
      network_id: "*" // Match any network id
    }
  }	
  		
};	
			]]>
			</screen>
		</section>
		<section id="truffle.compile">
			<title>编译智能合约</title>
			<screen>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project % truffle compile
Compiling ./contracts/Migrations.sol...
Compiling ./contracts/Netkiller.sol...
Writing artifacts to ./build/contracts
			]]>
			</screen>
			<para>truffle默认只会编译最后一次修改过的合约文件, 这是为了减少比重复编译。"--all"选项,可以强制编译所有文件。
			</para>
			<para>编译结果</para>
			<screen>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project % find build 
build
build/contracts
build/contracts/Migrations.json
build/contracts/Netkiller.json
			]]>
			</screen>
		</section>
		<section id="truffle.migrate">
			<title>migrate</title>
			<screen>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project % truffle migrate      
Using network 'development'.

Network up to date.			
			]]>
			</screen>
		</section>
		<section id="truffle.deploy">
			<title>部署智能合约</title>
			<screen>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project % truffle deploy
Using network 'development'.

Network up to date.			
			]]>
			</screen>
		</section>
		<section id="truffle.develop">
			<title>开发环境</title>
			<para>truffle 自带一个开发环境</para>
			<screen>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project %  truffle develop
Truffle Develop started at http://localhost:9545/

Accounts:
(0) 0x627306090abab3a6e1400e9345bc60c78a8bef57
(1) 0xf17f52151ebef6c7334fad080c5704d77216b732
(2) 0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef
(3) 0x821aea9a577a9b44299b9c15c88cf3087f3b5544
(4) 0x0d1d4e623d10f9fba5db95830f7d3839406c6af2
(5) 0x2932b7a2355d6fecc4b5c0b6bd44cc31df247a2e
(6) 0x2191ef87e392377ec08e7c08eb105ef5448eced5
(7) 0x0f4f2ac550a1b4e2280d04c21cea7ebd822934b5
(8) 0x6330a553fc93768f612722bb8c2ec78ac90b3bbc
(9) 0x5aeda56215b167893e80b4fe645ba6d5bab767de

Private Keys:
(0) c87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3
(1) ae6ae8e5ccbfb04590405997ee2d52d2b330726137b875053c36d94e974d162f
(2) 0dbbe8e4ae425a6d2687f1a7e3ba17bc98c673636790f1b8ad91193c05875ef1
(3) c88b703fb08cbea894b6aeff5a544fb92e78a18e19814cd85da83b71f772aa6c
(4) 388c684f0ba1ef5017716adb5d21a053ea8e90277d0868337519f97bede61418
(5) 659cbb0e2411a44db63778987b1e22153c086a95eb6b18bdf89de078917abc63
(6) 82d052c865f5763aad42add438569276c00d3d88a2d062d36b2bae914d58b8c8
(7) aa3680d5d48a8283413f7a108367c7299ca73f553735860a87b08f39395618b7
(8) 0f62d96d6675f32685bbdb8ac13cda7c23436f63efbb9d07700d8669ff12b7c4
(9) 8d5366123cb560bb606379f90a0bfd4769eecc0557f1b362dcae9012b548b1e5

Mnemonic: candy maple cake sugar pudding cream honey rich smooth crumble sweet treat

truffle(develop)> 
			
			]]>
			</screen>
			<para>truffle develop 的作用于 testrpc 类似。</para>
			<screen>
			<![CDATA[
neo@netkiller ~/ethereum/truffle-project % testrpc 
EthereumJS TestRPC v6.0.3 (ganache-core: 2.0.2)

Available Accounts
==================
(0) 0xb5fd43ee8fa5ce1db9a30a25ba385ee3bfc72966
(1) 0xf5a732345734e1f0f49cbadb145a20d1e1a44b95
(2) 0x834fcd8c55fdf21fd14c82e9a1ef5d3636a2fed6
(3) 0x5aa4d047d85727309d3ca653c83c3bb0ecd18903
(4) 0xb4db2dede86f4539e56ac4438f6e36f09c307e46
(5) 0x8da382b1a10ab2f1dc149e19fda228a07c78935c
(6) 0xb290297e89b52713548ff93e5fc23bc3c4183dde
(7) 0x546183289bd4d9d33a3aee0ee663c0729926e583
(8) 0xca58321e442533b7f827e6e8976e1905acd15214
(9) 0xe2c0b336bbb03564204e15a2cb7744564a53efcc

Private Keys
==================
(0) ff32f7a06e2fb26b51a745c1e428c60df92c0f9bb3301b19a5b7e0cdfaae521a
(1) cdbfe40321b6ade8a246748df1c48a738b8a531aee4d1f60a45bfd7f941e0064
(2) 7092117c2d7832980945e18645a60a1ed0e59261d040749f8b5202c2fc653d74
(3) f329657c9ad808e9f794a7462a1a9c276266343d5ced263ab618b6a19d6857c1
(4) 1221766592618add3a57ab109f00efcc70867dd8a9b10a0f7ea75c2b619edfc3
(5) c27005d6c3581193124c84766cc0b1cc318cb201b7d00b1035f4a4c7767ba790
(6) 6b7f43dca1dcc00203b751191096bb0602e17a9a94dcee8b846329efa703cea9
(7) 41be5971d71935bc88c3cf8aefd78ed3188c8721b7134cda3b25d353faf05d4f
(8) bd4c9d512a4f2da2cdcd9e4f89c049e3e7ac81bf57a05369997c2f13e793bebb
(9) 04196d803f743cc1fd021e7d02d5a552f14ab9826ccd4d4b265ff96c45169d2c

HD Wallet
==================
Mnemonic:      confirm shift cable melody caught swing erode language spend victory conduct van
Base HD Path:  m/44'/60'/0'/0/{account_index}

Listening on localhost:8545			
			]]>
			</screen>
		</section>
	</section>
	<section id="browser-solidity">
		<title>browser-solidity</title>
		<para>在线使用 browser-solidity</para>
		<ulink url="https://ethereum.github.io/browser-solidity/">https://ethereum.github.io/browser-solidity/</ulink>
		<ulink url="https://remix.ethereum.org/">https://remix.ethereum.org/</ulink>
		<para>国内网络有时不给力，建议将 Remix 安装到本地目录。</para>
		<section id="remix">
			<title>将 Remix(browser-solidity) 安装到本地</title>
			<para>共享合约目录</para>
			<screen>
			<![CDATA[
npm install -g remixd
remixd -S "/home/ethereum/codebase/blocks/contracts"		
			]]>
			</screen>
			<para>安装 browser-solidity </para>
			<screen>
				<![CDATA[
git clone https://github.com/ethereum/browser-solidity 
cd browser-solidity 
npm install 
npm run prepublish

sudo chown -R $USER:$(id -gn $USER) /home/neo/.config

npm start
				]]>
			</screen>
			<para>
				启动后浏览器中输入
				<ulink url="http://localhost:8080">http://localhost:8080</ulink>
				可以看到 Remix 界面
			</para>
			<note>
				<title>Web3 Provider</title>
				<para>Remix 提供三种运行环境,常用的有 JavaScript VM 和 Web3 Provider (连接到 --rpc
					--rpcaddr="0.0.0.0" --rpccorsdomain "*" --rpcport 8545)
				</para>
				<para>Web3 Provider 方式需要解锁账号和启动挖矿</para>
				<screen>
					<![CDATA[
> personal.unlockAccount(eth.accounts[0],"");
> miner.start(2); admin.sleepBlocks(1); miner.stop();			
					]]>
				</screen>
			</note>


		</section>
	</section>
	<section id="solc">
		<title>使用 solc 编译 *.sol 代码</title>
		<screen>
			<![CDATA[
neo@netkiller ~/ethereum/solidity % solc --bin --abi --optimize -o ./output helloworld.sol
neo@netkiller ~/ethereum/solidity % find output         
output
output/HelloWorld.bin
output/HelloWorld.abi			
			]]>
		</screen>
	</section>
	<section id="solidity.Getting.Started">
		<title>智能合约入门演示</title>
		<para>这里我们先做一个 Helloword 演示，让你初步对智能合约有一个大概的认识。</para>
		<tip>
			<para>需要注意的是，你在网上会看到很多例子，对照这例子一步一步操作，始终无法成功，这根Solidity的版本有很大关系。
			</para>
		</tip>

		<para>将下面代码粘贴到 </para>
		<programlisting>
			<![CDATA[
pragma solidity ^0.4.19;

contract HelloWorld
{
    string tmp;

    function HelloWorld() public
    {

    }

    function get() public constant returns (string)
    {
        return tmp;
    }

    function set(string _tmp) public
    {
        tmp = _tmp;
    }

}
			]]>
		</programlisting>
		<para>Compile - Details - WEB3DEPLOY</para>
		<programlisting>
			<![CDATA[
var helloworldContract = web3.eth.contract([{"constant":false,"inputs":[{"name":"_tmp","type":"string"}],"name":"set","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]);
var helloworld = helloworldContract.new(
   {
     from: web3.eth.accounts[0], 
     data: '0x6060604052341561000f57600080fd5b6102e38061001e6000396000f30060606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634ed3885e146100515780636d4ce63c146100ae575b600080fd5b341561005c57600080fd5b6100ac600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061013c565b005b34156100b957600080fd5b6100c1610156565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101015780820151818401526020810190506100e6565b50505050905090810190601f16801561012e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101529291906101fe565b5050565b61015e61027e565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101f45780601f106101c9576101008083540402835291602001916101f4565b820191906000526020600020905b8154815290600101906020018083116101d757829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061023f57805160ff191683800117855561026d565b8280016001018555821561026d579182015b8281111561026c578251825591602001919060010190610251565b5b50905061027a9190610292565b5090565b602060405190810160405280600081525090565b6102b491905b808211156102b0576000816000905550600101610298565b5090565b905600a165627a7a72305820ea826c30d131f20a4d3a8e3fb059ffa95f4c222a5b099029750e4c1937b46e5b0029', 
     gas: '4700000'
   }, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })
			]]>
		</programlisting>

		<para>部署智能合约需要消耗 gas 所以你要先解锁账号。</para>
		<screen>
			<![CDATA[
> personal.unlockAccount("0x83fda0ba7e6cfa8d7319d78fa0e6b753a2bcb5a6", "", 300)
true			
			]]>
		</screen>

		<screen>
			<![CDATA[
> var helloworldContract = web3.eth.contract([{"constant":false,"inputs":[{"name":"_tmp","type":"string"}],"name":"set","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]);
undefined
> var helloworld = helloworldContract.new(
...    {
......      from: web3.eth.accounts[0], 
......      data: '0x6060604052341561000f57600080fd5b6102e38061001e6000396000f30060606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634ed3885e146100515780636d4ce63c146100ae575b600080fd5b341561005c57600080fd5b6100ac600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061013c565b005b34156100b957600080fd5b6100c1610156565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101015780820151818401526020810190506100e6565b50505050905090810190601f16801561012e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600090805190602001906101529291906101fe565b5050565b61015e61027e565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101f45780601f106101c9576101008083540402835291602001916101f4565b820191906000526020600020905b8154815290600101906020018083116101d757829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061023f57805160ff191683800117855561026d565b8280016001018555821561026d579182015b8281111561026c578251825591602001919060010190610251565b5b50905061027a9190610292565b5090565b602060405190810160405280600081525090565b6102b491905b808211156102b0576000816000905550600101610298565b5090565b905600a165627a7a72305820ea826c30d131f20a4d3a8e3fb059ffa95f4c222a5b099029750e4c1937b46e5b0029', 
......      gas: '4700000'
......    }, function (e, contract){
......     console.log(e, contract);
......     if (typeof contract.address !== 'undefined') {
.........          console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
.........     }
......  })
null [object Object]
undefined
			]]>
		</screen>
		<para>helloworld 智能合约已经创建完毕</para>
		<screen>
			<![CDATA[
> helloworld
{
  abi: [{
      constant: false,
      inputs: [{...}],
      name: "set",
      outputs: [],
      payable: false,
      stateMutability: "nonpayable",
      type: "function"
  }, {
      constant: true,
      inputs: [],
      name: "get",
      outputs: [{...}],
      payable: false,
      stateMutability: "view",
      type: "function"
  }, {
      inputs: [],
      payable: false,
      stateMutability: "nonpayable",
      type: "constructor"
  }],
  address: undefined,
  transactionHash: "0x466c9ad9db8f37ed5b65bc261210da92f51364ebab1dcbd3759bfc3e16ad6502"
}
			
			]]>
		</screen>
	</section>
	<section id="solidity.type.public">
		<title>修饰符</title>
		<screen>
			<![CDATA[
public ： 函数可见性

payable ：可支付的函数修饰符，没有该修饰符无法接受转账操作。

msg.value ：执行合约时，转账的eth数量，以wei为单位。

msg.sender : 执行合约的地址			
			]]>
		</screen>
	</section>
	<section id="solidity.type">
		<title>数据类型</title>
		<literallayout>
			<![CDATA[
uint 无符号整形（256bits 无符号整数）
string 字符串类型	
			]]>
		</literallayout>
		<section>
			<title>数组</title>
			<programlisting>
				<![CDATA[
	//创建一个memory的数组
	uint[] memory a = new uint[](7);
	
	uint[] x = [uint(1), 3, 4];
	
    bytes memory b = new bytes(10);
				]]>
			</programlisting>
			<para>二维数组</para>
			<programlisting>
			<![CDATA[
uint [2][3] T = [[1,2],[3,4],[5,6]];			
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
pragma solidity ^0.4.19;
//Author: netkiller <netkiller@msn.com>
//Home: http://www.netkiller.cn
contract ArrayTest {
    
    uint [] array = [1,2,3,4,5];
    
    // 通过for循环计算数组内部的值的总和
    function sum() constant public returns (uint) {
        uint num = 0;
        for(uint i = 0; i < array.length; i++) {
            num = num + array[i];
        }
        return num;
    }
    
    function sumNumbers(uint[] _numbers) public pure returns (uint) {
        uint num = 0;
        for(uint i = 0; i < _numbers.length; i++) {
            num = num + _numbers[i];
        }
        return num;
    }
    
}
			]]>
			</programlisting>
			<section>
				<title>length</title>
				<para>.length 属性是活动数组的尺寸</para>
				<programlisting>
				<![CDATA[
pragma solidity ^0.4.19;
//Author: netkiller <netkiller@msn.com>
//Home: http://www.netkiller.cn
contract ArrayLength {
    
    uint [] array = [1,2,3,4,5];
    
    function getLength() public constant returns (uint) {
        
        return array.length;
    }
    
}				
				]]>
				</programlisting>
			</section>
			<section>
				<title>push() 方法</title>
				<para>通过 push 可以向数组中添加数据</para>
				<programlisting>
				<![CDATA[
pragma solidity ^0.4.19;
//Author: netkiller <netkiller@msn.com>
//Home: http://www.netkiller.cn
contract ArrayLength {
    
    uint [] array = [1,2,3,4,5];
    
    function pushArray() public {
        
        array.push(6);
    }
    
    function getLength() public constant returns (uint) {
        
        return array.length;
    }
    
}				
				]]>
				</programlisting>
			</section>
		</section>
		<section id="solidity.enum">
			<title>枚举类型</title>
			<para>State 就是一个自定义的整型，当枚举数不够多时，它默认的类型为uint8，当枚举数足够多时，它会自动变成uint16，枚举下标定义从左至右从零开始。</para>
			<para>New=0, Pending=1, Done=2, Deleted=3</para>
			<para>访问枚举方式 State.New 实际等于数字 0</para>
			<programlisting>
			<![CDATA[
pragma solidity ^0.4.19;
//Author: netkiller <netkiller@msn.com>
//Home: http://www.netkiller.cn
contract EnumTest {
    enum State { New, Pending, Done, Deleted }
    State state = State.New;

    function set(State _state) public {
        state = _state;
    }

    function get() constant public returns (State) {
        return state;
    }

}			
			]]>
			</programlisting>
			<para>枚举用来定义状态</para>
			<programlisting>
				<![CDATA[
pragma solidity ^0.4.0;

contract Purchase {
    enum State { Created, Locked, Inactive } // Enum
}				
				]]>
			</programlisting>
			
		</section>
		<section id="solidity.struct">
			<title>结构体</title>
			<para>定义结构体</para>
			<screen>
				<![CDATA[
	struct Voter {
        uint weight; // weight is accumulated by delegation
        bool voted;  // if true, that person already voted
        address delegate; // person delegated to
        uint vote;   // index of the voted proposal
    }

    // This is a type for a single proposal.
    struct Proposal {
        bytes32 name;   // short name (up to 32 bytes)
        uint voteCount; // number of accumulated votes
    }			
				]]>
			</screen>
			<para>演示例子</para>
			<programlisting>
				<![CDATA[
pragma solidity ^0.4.19;
//Author: netkiller <netkiller@msn.com>
//Home: http://www.netkiller.cn
contract Students {
    
    struct Person {
        string name;
        uint age;
        uint class;
        
    }

    Person person = Person("Neo",18,1);

    function getPerson() public view returns(string){
        return person.name;
    }
}				
				]]>
			</programlisting>

		</section>
		<section id="address">
			<title>address</title>
			<screen>
				<![CDATA[
address public minter;
				]]>
			</screen>
			<section>
				<title>payable</title>

			</section>
			<section>
				<title>.value()</title>

			</section>
			<section>
				<title>.gas()</title>

			</section>
		</section>
		<section id="solidity.type.mapping">
			<title>mapping</title>
			<para>mapping 就是图数据结构，由 key 和 value 组成。</para>
			<programlisting>
			<![CDATA[
pragma solidity ^0.4.19;
//Author: netkiller <netkiller@msn.com>
//Home: http://www.netkiller.cn
contract MappingExample {
    
    mapping(uint => string) map;

    function put(uint key, string value) public {
        map[key] = value;
    }
    
    function get(uint key) constant public returns (string) {
        return map[key];
    }
}			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="solidity.variable">
		<title>变量</title>
		<programlisting>
			<![CDATA[
address public minter;
string name;
int num;	

    uint constant x = 32**22 + 8;
    string constant text = "abc";
    bytes32 constant myHash = keccak256("abc");
    
    uint256 ticket = 1 ether;
			]]>
		</programlisting>
		<para>变量赋值</para>
		<programlisting>
			<![CDATA[
pragma solidity ^0.4.19;

contract C {
    uint[] data;

    function f() public view returns (uint, bool, uint) {
        return (7, true, 2);
    }

    function g() public {
        // 声明和分配变量。 明确指定类型是不可能的。
        var (x, b, y) = f();
        // 分配给一个预先存在的变量。
        (x, y) = (2, 7);
        // 互换值的常用技巧对于非价值存储类型不起作用。
        (x, y) = (y, x);
        // 组件可以省略（也可以用于变量声明）。
        // 如果元组以空组件结束，其余的值将被丢弃。
        (data.length,) = f(); // 设置长度为 7
        // 在左边也可以做同样的事情。
        (,data[3]) = f(); // Sets data[3] to 2
        // 组件只能在作业的左侧排除，但有一个例外：
        (x,) = (1,);
        // (1,) 是指定1元组元的唯一方法，因为（1）等于1。
    }
}			
			]]>
		</programlisting>
	</section>
	<section id="solidity.function">
		<title>函数</title>
		<section>
			<title>构造方法</title>
			<para>构造方法的定义是 contract 与 function 相同</para>
			<programlisting>
				<![CDATA[
pragma solidity ^0.4.18;

contract MyContractByNetkiller {
    /* Constructor */

    function MyContractByNetkiller() public{

    }
}
				]]>
			</programlisting>
		</section>
		<section>
			<title>定义函数</title>
			<para>没有返回值</para>
			<programlisting>
				<![CDATA[
	function setName(string _name) public{
        name = _name;
    }			
				]]>
			</programlisting>
		</section>
		<section>
			<title>函数返回值</title>
			<para>有返回值</para>
			<programlisting>
				<![CDATA[
	function getName() public view returns(string){
        return name;
    }
				]]>
			</programlisting>
		</section>
		<section id="solidity.func.param">
			<title>参数传递</title>
			<para>除了 f(2,3) 这样传递参数，还可以使用类似字典或Map的方式 f({value: 2, key: 3});
			</para>
			<programlisting>
				<![CDATA[
pragma solidity ^0.4.0;

contract C {
    function f(uint key, uint value) {
        // ...
    }

    function g() {
        // named arguments
        f({value: 2, key: 3});
    }
}				
				]]>
			</programlisting>
		</section>
		<section>
			<title>函数的例子</title>
			<para>完整的例子</para>
			<programlisting>
				<![CDATA[
pragma solidity ^0.4.18;

contract MyContractByNetkiller {
    /* Constructor */
    string name;
    int num;
    function MyContractByNetkiller() public{
        name = "default";
        num = 1;
    }
    function setName(string _name) public{
        name = _name;
    }
    function getName() public view returns(string){
        return name;
    }
    function setNum(int n) public{
        num = n;
    }
    function addNum(int m) public view returns(int res){
        res = m + num;
    }
}
				]]>
			</programlisting>
		</section>
		<section id="function.Fallback">
			<title>Fallback function</title>
			<programlisting>
				<![CDATA[
				
				]]>
			</programlisting>
		</section>
		<section id="solidity.modifier">
			<title>modifier</title>
			<para>modifier 可以理解为 function 的触发器，或者理解为 hook。执行 function的时候会首先运行
				modifier
			</para>
			<para>_; 表示执行 modifier 完成所有命令后，继续运行 function 内的逻辑。</para>
			<screen>
				<![CDATA[
pragma solidity ^0.4.11;  
  
contract owned {  
    function owned() { owner = msg.sender; }  
    address owner;    
    uint price;
    mapping (address => bool) registeredAddresses;
  
    modifier onlyOwner {  
        require(msg.sender == owner);  
        _;  
    } 
    function changePrice(uint _price) onlyOwner {  
        price = _price;  
    } 
    function close() onlyOwner {  
        selfdestruct(owner);  
    }  
}
				]]>
			</screen>
		</section>
	</section>
	<section id="solidity.event">
		<title>事件</title>

		<programlisting>
			<![CDATA[
	event Sent(address from, address to, uint amount);			
			]]>
		</programlisting>

	</section>
	<section id="solidity.oop">
		<title>面向兑奖编程</title>
		<section id="solidity.is">
			<title>继承</title>
			<para>例子 mortal 继承 owned</para>
			<programlisting>
				<![CDATA[
pragma solidity ^0.4.11;  
  
contract owned {  
    function owned() { owner = msg.sender; }  
    address owner;  
  
    modifier onlyOwner {  
        require(msg.sender == owner);  
        _;  
    }  
}  
  
  
contract mortal is owned {  
    function close() onlyOwner {  
        selfdestruct(owner);  
    }  
}
				]]>
			</programlisting>
		</section>
	</section>
	<section id="solidity.example">
		<title>solidity example</title>
		<section id="voting">
			<title>Voting</title>
			<programlisting>
			<![CDATA[
pragma solidity ^0.4.19;
//author: netkiller <netkiller@msn.com>
//homepage: http://www.netkiller.cn
contract Voting {

  mapping (bytes32 => uint8) public votesReceived;

  // 存储候选人名字的数组
  bytes32[] public candidateList;


  // 构造函数 初始化候选人名单
  function Voting(bytes32[] candidateNames) public {

    candidateList = candidateNames;
  }

  // 查询某个候选人的总票数
  function totalVotesFor(bytes32 candidate) public constant returns (uint8) {
    require(validCandidate(candidate) == true);
    // 或者
    // assert(validCandidate(candidate) == true);
    return votesReceived[candidate];
  }

  // 为某个候选人投票
  function voteForCandidate(bytes32 candidate) public{
    assert(validCandidate(candidate) == true);
    votesReceived[candidate] += 1;
  }

  // 检索投票的姓名是不是候选人的名字
  function validCandidate(bytes32 candidate) public constant returns (bool) {
    for(uint i = 0; i < candidateList.length; i++) {
      if (candidateList[i] == candidate) {
        return true;
      }
    }
    return false;
  }

}
			]]>
			</programlisting>
		</section>

		<section id="s">
			<title>智能合约语言 Solidity</title>
		</section>

	</section>

</chapter>