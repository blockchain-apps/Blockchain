<?xml version="1.0" encoding="UTF-8"?>
<section>
	<title>Chaincode 结构</title>
	<section>
		<title>包</title>
		<programlisting>
		<![CDATA[
package main		
		]]>
		</programlisting>
	</section>
	<section>
		<title>导入库</title>
		<programlisting>
		<![CDATA[
import (
	"fmt"
	"strconv"

	"github.com/hyperledger/fabric/core/chaincode/shim"
	pb "github.com/hyperledger/fabric/protos/peer"
)
		
		]]>
		</programlisting>
	</section>
	<section>
		<title>定义类</title>
		<screen>
		<![CDATA[
type SimpleChaincode struct {
}		
		]]>
		</screen>
	</section>
	<section>
		<title>Init 方法</title>
		<para>负责初始化工作</para>
		<programlisting>
		<![CDATA[
func (t *SimpleChaincode) Init(stub shim.ChaincodeStubInterface) pb.Response {
}		
		]]>
		</programlisting>
	</section>
	<section>
		<title>Invoke</title>
		<para>区块的put, get, del 操作逻辑都在 Invoke 中</para>
		<programlisting>
		<![CDATA[
func (t *SimpleChaincode) Invoke(stub shim.ChaincodeStubInterface) pb.Response {
}		
		]]>
		</programlisting>
	</section>
	<section>
		<title>func main() </title>
		<programlisting>
		<![CDATA[
func main() {
	err := shim.Start(new(SimpleChaincode))
	if err != nil {
		fmt.Printf("Error starting Simple chaincode: %s", err)
	}
}		
		]]>
		</programlisting>
	</section>
</section>
<section>
	<title>shim.ChaincodeStubInterface 接口</title>
	<para>Hyperledger提供基于key/value的数据存储，其中key是字符串，value则是二进制字节数组，Hyperledger的Go API提供了三个方法用于数据存取：PutState（key, value）用于向Hyperledger中存储数据， GetState(key)用于从Hyperledger中提取数据，而DelState(key)则从Hyperledger中删除数据。</para>
	<section>
		<title>PutState（key, value）</title>
		<para></para>
	</section>
	<section>
		<title>GetState(key)</title>
	</section>
	<section>
		<title>DelState(key)</title>
	</section>
	<section>
		<title>stub.SetEvent(key, value)</title>
	</section>
</section>