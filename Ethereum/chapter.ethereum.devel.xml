<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="web3" ?>
	<title>web3.js - 1.0.0</title>
	<!-- http://web3js.readthedocs.io/en/1.0/index.html -->
	<para>注意本章采用 web3.js v1.0.0 版本，这个版本仍在beta阶段，还没有 release。</para>
	<para>你看到网上很多实例，安照例子的步骤操作，发现无法成功，很可能跟版本有关。v1.0.0
		与之前的版本还是有很大差异，所以选择版本很重要。因为 v1.0.0 很快就会 release 所以本章不会在用早起版本举例。
	</para>
	<section id="web3.js.setup">
		<title>开发环境</title>
		<screen>
		<![CDATA[
npm init
npm install web3 --save
npm install solc
		]]>
		</screen>
	</section>
	<section id="truffle-contract">
		<title>truffle-contract</title>
		<screen>
		<![CDATA[
neo@MacBook-Pro ~/ethereum/web3 % npm install truffle-contract		
		]]>
		</screen>
	</section>
	<section id="web3.js.pm2">
		<title>使用 pm2 启动以太坊</title>
		<screen>
		<![CDATA[
npm install -g pm2
		]]>
		</screen>
		<para>创建 ~/geth.json 文件</para>
		<programlisting>
		<![CDATA[
[
  {
    "name"              : "geth",
    "cwd"               : "/usr/bin/",
    "script"            : "geth",
    "args"              : "--rpcapi eth,web3 --rpc --dev --datadir /home/neo/ethereum",
    "log_date_format"   : "YYYY-MM-DD HH:mm Z",
    "out_file"      : "/home/neo/ethereum/log/geth_out.log",
    "error_file"    : "/home/neo/ethereum/log/geth_err.log",
    "log_file"      : "/home/neo/ethereum/log/geth_log.log",
    "merge_logs"        : false,
    "watch"             : false,
    "max_restarts"      : 10,
    "exec_interpreter"  : "none",
    "exec_mode"         : "fork_mode"
  }
]
		]]>
		</programlisting>
		<para>启动以太坊</para>
		<screen>
		<![CDATA[
pm2 start geth.json
		]]>
		</screen>
	</section>
	<section id="web3.js.connect">
		<title>连接到以太坊客户端</title>
		<section>
			<title>http 方式</title>
			<programlisting>
			<![CDATA[
var Web3 = require('web3');
var web3 = new Web3('http://localhost:8545');
			]]>
			</programlisting>
			<para>查看连接状态</para>
			<screen>
			<![CDATA[
> web3.currentProvider
HttpProvider {
  host: 'http://localhost:8545',
  timeout: 0,
  connected: true,
  headers: undefined }			
			]]>
			</screen>
			<para>connected: true 表示连接成功。</para>
		</section>
		<section id="">
			<title>WebSocket 方式</title>
			<screen>
			<![CDATA[
var Web3 = require('web3');
var web3 = new Web3(Web3.givenProvider || 'ws://remotenode.com:8546');
			]]>
			</screen>
		</section>
		<section id="">
			<title>IPC 方式</title>
			<screen>
			<![CDATA[
// Using the IPC provider in node.js
var net = require('net');

var web3 = new Web3('/Users/myuser/Library/Ethereum/geth.ipc', net); // mac os path
			]]>
			</screen>
		</section>
	</section>
	
	<section id="web3.eth">
		<title>web3.eth</title>
		<section id="">
			<title>查看账号列表</title>
			<screen>
			<![CDATA[
var Web3 = require('web3');
var web3 = new Web3('http://localhost:8545');

web3.eth.getAccounts().then(console.log);		
			]]>
			</screen>
		</section>
		<section id="">
			<title>查询矿工账号</title>
			<screen>
			<![CDATA[
var Web3 = require('web3');
var web3 = new Web3('http://localhost:8545');
			
web3.eth.getCoinbase().then(console.log);			
			]]>
			</screen>
		</section>
	</section>
	<section id="web3.js.contracts">
		<title>智能合约</title>
		<section>
			<title>event</title>
			<screen>
			<![CDATA[
tokenContract.events.Transfer({
    fromBlock: 0,
    toBlock:'latest'
}, function(error, event){ /*console.log(JSON.stringify(event)); */})
.on('data', function(event){
    console.log(event); // same results as the optional callback above
})
.on('changed', function(event){
    // remove event from local database
})
.on('error', console.error);
			]]>
			</screen>
		</section>
	</section>
	<section id="solc">
		<title></title>
		<section id="solc.compile">
			<title>solc.compile</title>
		
			<screen>
			<![CDATA[
pragma solidity ^0.4.0;
contract HelloWorldContract {
  function sayHi() constant returns (string){
    return 'Hello World';
  }
}			
			]]>
			</screen>
			<programlisting>
			<![CDATA[
const fs = require ('fs');
const solc = require ('solc');
const input = fs.readFileSync('HelloWorldContract.sol');
const output = solc.compile(input.toString(), 1);
for (var contractName in output.contracts){
 console.log(contractName + ': ' + output.contracts[contractName].bytecode)
}
			]]>
			</programlisting>
			<screen>
			<![CDATA[
> const fs = require ('fs');
undefined
> const solc = require ('solc');

undefined
> const input = fs.readFileSync('HelloWorldContract.sol');
undefined
> const output = solc.compile(input.toString(), 1);

undefined
> for (var contractName in output.contracts){
...  console.log(contractName + ': ' + output.contracts[contractName].bytecode)
... }
:HelloWorldContract: 6060604052341561000f57600080fd5b61014e8061001e6000396000f3006060604052600436106100405763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c49c36c8114610045575b600080fd5b341561005057600080fd5b6100586100cf565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561009457808201518382015260200161007c565b50505050905090810190601f1680156100c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100d7610110565b60408051908101604052600b81527f48656c6c6f20576f726c640000000000000000000000000000000000000000006020820152905090565b602060405190810160405260008152905600a165627a7a723058206dc75b1be2caa91f056c3682d24390fcb090a96bbf1b2b4c11cdd807518dc03c0029
undefined
			]]>
			</screen>
		</section>
	</section><section id="web3.example">
		<title>实用例子</title>
		<section>
			<title>数据写入到区块链中</title>
			<para>做一笔交易，并写入数据到区块链中</para>
			<screen>
			<![CDATA[
let Web3 = require("web3");
let fs = require("fs");
let web3 = new Web3("http://localhost:8545");

let log = {
    time:(new Date).getTime(),
    type:"info",
    msg:"Web3 Test!!!"
};
let str = JSON.stringify(log);
console.log(str);
let data = Buffer.from(str).toString('hex');
data = '0x'+data;
console.log(data);

//将数据写入到交易中
let coinbase = "0x5c18a33df2cc41a1beddc91133b8422e89f041b7"
console.log(coinbase)
let user1 = "0xc2b9e316f246d35052118e51b55c75bfe99d247e";
web3.eth.personal.unlockAccount(coinbase, "coinbase");
let address = web3.eth.sendTransaction({
    from:coinbase,
    to:user1,
    value:'0x00',
    data:data
},function(error, hash){
    console.log(hash);
});
			]]>
			</screen>
			<para>运行上面程序，会产生一个交易，记下hash值，然后启动挖矿。</para>
			<screen>
			<![CDATA[
> miner.start();
null
# 过一段时间后停止
> miner.stop();
true
			]]>
			</screen>
			<para>然后查看这比交易</para>
			<screen>
			<![CDATA[
let Web3 = require("web3");
let fs = require("fs");
let web3 = new Web3("http://localhost:8545");
let address ="0xb15681eb4bdb6b9670d305fb341ebbc95d45c2ede0ea5034ef432b74f30b1b4f";
//从交易地址获取数据
web3.eth.getTransaction(address).then(console.log);

web3.eth.getTransaction(address,function(error, result){
    //console.log(result);
    inputData = result.input;
    res_str = Buffer.from(inputData.replace('0x',''),'hex').toString();
    res_json = JSON.parse(res_str);
    console.log(res_json);
});			
			]]>
			</screen>
			<para>结果输出</para>
			<screen>
			<![CDATA[
{ blockHash: '0x78dacc2af60900d2e4cae90b71e27446e6e883df36c53f21cbc9e071f7a586f4',
  blockNumber: 1258,
  from: '0x5c18a33DF2cc41a1bedDC91133b8422e89f041B7',
  gas: 90000,
  gasPrice: '18000000000',
  hash: '0xb15681eb4bdb6b9670d305fb341ebbc95d45c2ede0ea5034ef432b74f30b1b4f',
  input: '0x7b2274696d65223a313531383933313435323537372c2274797065223a22696e666f222c226d7367223a22576562332054657374212121227d',
  nonce: 4,
  to: '0xc2b9e316F246d35052118E51B55C75BfE99d247e',
  transactionIndex: 0,
  value: '0',
  v: '0x41',
  r: '0x7fcd86c7fd975a0e98bd0e61a99da950b0155cd6c4581fefa4defbdcd404a930',
  s: '0x16f14ce1fbfadb9d59f343f8ac235cdd73dcedec5db1025ef91206b8bb17a827' }
{ time: 1518931452577, type: 'info', msg: 'Web3 Test!!!' }
			]]>
			</screen>
			<para>{ time: 1518931452577, type: 'info', msg: 'Web3 Test!!!' }
				就是保存在区块链中的数据。</para>
		</section>
		<section>
			<title>编译部署智能合约</title>
			<screen>
			<![CDATA[
console.log('Setting up...');
const fs = require ('fs');
const solc = require ('solc');
const Web3 = require ('web3');
const web3 = new Web3("http://localhost:8545");
console.log('Reading Contract...');
const input = fs.readFileSync('Netkiller.sol');
console.log('Compiling Contract...');
const output = solc.compile(input.toString(), 1);
//console.log(output);
const bytecode = output.contracts[':Netkiller'].bytecode;
//console.log(bytecode);
const abi = output.contracts[':Netkiller'].interface;
//console.log(abi);
//Contract Object
//const helloWorldContract = web3.eth.contract(JSON.parse(abi));

var myContract = new web3.eth.Contract(JSON.parse(abi), '0x5c18a33df2cc41a1beddc91133b8422e89f041b7', {
    from: '0x5c18a33df2cc41a1beddc91133b8422e89f041b7', // default from address
    gasPrice: '20000000000' // default gas price in wei, 20 gwei in this case
});

console.log('unlocking Coinbase account');
const password = "chen1980";
web3.eth.personal.unlockAccount("0x5c18a33df2cc41a1beddc91133b8422e89f041b7", password,100);

console.log("Deploying the contract");
			]]>
			</screen>
		</section>
		<section >
			<title>调用合约</title>
			<para>部署智能合约，你可以使用钱包部署，也可以使用Truffer部署，不管你采用什么方式，最终我们需要合约地址。</para>
			<programlisting>
			<![CDATA[
pragma solidity ^0.4.18;

contract MetaCoin {
	mapping (address => uint) balances;

	event Transfer(address indexed _from, address indexed _to, uint256 _value);

	function MetaCoin() public {
		balances[tx.origin] = 10000;
	}

	function sendCoin(address receiver, uint amount) public returns(bool sufficient) {
		if (balances[msg.sender] < amount) return false;
		balances[msg.sender] -= amount;
		balances[receiver] += amount;
		Transfer(msg.sender, receiver, amount);
		return true;
	}

	function getBalanceInEth(address addr) public view returns(uint){
		return convert(getBalance(addr),2);
	}

	function getBalance(address addr) public view returns(uint) {
		return balances[addr];
	}
	
	function convert(uint amount,uint conversionRate) public pure returns (uint convertedAmount)
	{
		return amount * conversionRate;
	}
	
}

			]]>
			</programlisting>
			<para>这里使用 Truffle 部署</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % truffle compile --all
Compiling ./contracts/MetaCoin.sol...
Writing artifacts to ./build/contracts

neo@MacBook-Pro ~/ethereum/truffle % truffle migrate --reset
Using network 'development'.

Running migration: 5_initial_migration.js
  Deploying MetaCoin...
  ... 0x9c006b398733a1d8679cbb00493ca75ff063f51c34521ae67a70523deeebf9c4
  MetaCoin: 0xfb88de099e13c3ed21f80a7a1e49f8caecf10df6
Saving successful migration to network...
  ... 0x755a48ef99e488d7cf8460d718773a5afe73f760fb87697e51c40f3e6086f10b
Saving artifacts...
			
			]]>
			</screen>
			<para>得到合约地址 MetaCoin: 0xfb88de099e13c3ed21f80a7a1e49f8caecf10df6</para>
			<para>编译合约获得 abi 接口</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % solc --bin --abi --optimize -o ./output contracts/MetaCoin.sol 
neo@MacBook-Pro ~/ethereum/truffle % cat output/MetaCoin.abi 
[{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getBalanceInEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"receiver","type":"address"},{"name":"amount","type":"uint256"}],"name":"sendCoin","outputs":[{"name":"sufficient","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"amount","type":"uint256"},{"name":"conversionRate","type":"uint256"}],"name":"convert","outputs":[{"name":"convertedAmount","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"}]			
			]]>
			</screen>
			<programlisting>
			<![CDATA[
var Web3 = require("web3");
// 创建web3对象
var web3 = new Web3("http://localhost:9545");
// 合约ABI
var abi = [{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getBalanceInEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"receiver","type":"address"},{"name":"amount","type":"uint256"}],"name":"sendCoin","outputs":[{"name":"sufficient","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"amount","type":"uint256"},{"name":"conversionRate","type":"uint256"}],"name":"convert","outputs":[{"name":"convertedAmount","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"}];
// 合约地址
var address = "0xfb88de099e13c3ed21f80a7a1e49f8caecf10df6";
var tokenContract = new web3.eth.Contract(abi, address);
// 调用函数
tokenContract.methods.getBalance("0x627306090abab3a6e1400e9345bc60c78a8bef57").call(null,function(error,result){
        console.log("getBalance "+result);
});
tokenContract.methods.getBalanceInEth("0x627306090abab3a6e1400e9345bc60c78a8bef57").call(null,function(error,result){
        console.log("getBalanceInEth "+result);
});	
tokenContract.methods.getBalance("0xf17f52151ebef6c7334fad080c5704d77216b732").call(null,function(error,result){
        console.log("getBalance 2 "+result);
});	
tokenContract.methods.sendCoin("0xf17f52151ebef6c7334fad080c5704d77216b732",387).send({from: '0x627306090abab3a6e1400e9345bc60c78a8bef57'})
.on('transactionHash', function(hash){
}).on('confirmation', function(confirmationNumber, receipt){
}).on('receipt', function(receipt){
    // receipt example
    console.log(receipt); //查询这里可以得到结果
}).on('error', console.error); // If a out of gas error, the second parameter is the receipt.
			]]>
			</programlisting>
			<para>运行结果</para>
			<screen>
			<![CDATA[
getBalance 10000
getBalanceInEth 20000
getBalance 2 0
{ transactionHash: '0x0f7514413865219d70873634c00d1b4746c5faa436283786f5414b483b6d6333',
  transactionIndex: 0,
  blockHash: '0x5a7662d14f78b6b4d64b05c0ec1e1e641bd39440467f0476409f4e49c21f287a',
  blockNumber: 11,
  gasUsed: 51024,
  cumulativeGasUsed: 51024,
  contractAddress: null,
  status: 1,
  events: 
   { Transfer: 
      { logIndex: 0,
        transactionIndex: 0,
        transactionHash: '0x0f7514413865219d70873634c00d1b4746c5faa436283786f5414b483b6d6333',
        blockHash: '0x5a7662d14f78b6b4d64b05c0ec1e1e641bd39440467f0476409f4e49c21f287a',
        blockNumber: 11,
        address: '0xFB88dE099e13c3ED21F80a7a1E49f8CAEcF10df6',
        type: 'mined',
        id: 'log_8b567824',
        returnValues: [Result],
        event: 'Transfer',
        signature: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
        raw: [Object] } } }
			]]>
			</screen>
			<para>再次运行</para>
			<screen>
			<![CDATA[
getBalance 9613
getBalanceInEth 19226
getBalance 2 387
{ transactionHash: '0x6d33487d9067494288190f7a64b3118c20560479e01afe8d53e37ca46a6001e4',
  transactionIndex: 0,
  blockHash: '0x28f6d416c68dbbd698d1a0b0fdc4ce842694d82318a38ea6395413fd15397642',
  blockNumber: 12,
  gasUsed: 36024,
  cumulativeGasUsed: 36024,
  contractAddress: null,
  status: 1,
  events: 
   { Transfer: 
      { logIndex: 0,
        transactionIndex: 0,
        transactionHash: '0x6d33487d9067494288190f7a64b3118c20560479e01afe8d53e37ca46a6001e4',
        blockHash: '0x28f6d416c68dbbd698d1a0b0fdc4ce842694d82318a38ea6395413fd15397642',
        blockNumber: 12,
        address: '0xFB88dE099e13c3ED21F80a7a1E49f8CAEcF10df6',
        type: 'mined',
        id: 'log_e5cfee46',
        returnValues: [Result],
        event: 'Transfer',
        signature: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
        raw: [Object] } } }

			]]>
			</screen>
			<para>第二次运行会打印出账号2的余额</para>
		</section>
		<section id="">
			<title>部署合约</title>
			<screen>
			<![CDATA[
var Web3 = require('web3');
var web3 = new Web3(new Web3.providers.IpcProvider("~/netkiller/ethereum/geth.ipc",net));
var eth=web3.eth;

var abi = [...];
var bin = "";

var tokenContract = new web3.eth.Contract(abi, null, {
    from: '0xFB88dE099e13c3ED21F80a7a1E49f8CAEcF10df6' // 目前web3没有api来解锁账户,只能自己事先解锁
});

tokenContract.deploy({
    data: bin,
    arguments: ['netkiller'] // 这里是构造函数传值
}).send({
    from: '0xFB88dE099e13c3ED21F80a7a1E49f8CAEcF10df6',
    gas: 1500000,
    gasPrice: '30000000000000'
}, function(error, transactionHash){
    console.log("deploy tx hash:"+transactionHash)
})
.on('error', function(error){ console.error(error) })
.on('transactionHash', function(transactionHash){ console.log("hash:",transactionHash)})
.on('receipt', function(receipt){
   console.log(receipt.contractAddress) // contains the new contract address
})
.on('confirmation', function(confirmationNumber, receipt){console.log("receipt,",receipt)})
.then(function(newContractInstance){
    console.log(newContractInstance.options.address) // instance with the new contract address
});			
			]]>
			</screen>
		</section>
	</section>
</chapter>

<chapter id="index"><?dbhtml dir="web3j" ?>
	<title>Jave Client</title>
	<para>
		官方网站
		<ulink url="https://web3j.io">https://web3j.io</ulink>
	</para>
	<para>Java 客户端与 Server 之间采用json-rpc协议连接。</para>
	<section id="web3j.command.line.tools">
		<title>安装命令行工具</title>
		<para>web3j 命令用于将 sol 合约文件转换为 java 文件。</para>
		<section>
			<title>Mac OS</title>
			<screen>
			<![CDATA[
brew tap web3j/web3j
brew install web3j

neo@MacBook-Pro ~ % web3j

              _      _____ _     _        
             | |    |____ (_)   (_)       
__      _____| |__      / /_     _   ___  
\ \ /\ / / _ \ '_ \     \ \ |   | | / _ \ 
 \ V  V /  __/ |_) |.___/ / | _ | || (_) |
  \_/\_/ \___|_.__/ \____/| |(_)|_| \___/ 
                         _/ |             
                        |__/              

Usage: web3j version|wallet|solidity ...	
			]]>
			</screen>
		</section>
		<section>
			<title>二进制包安装</title>
			<para>
				下载二进制文件
				<ulink url="https://github.com/web3j/web3j/releases">https://github.com/web3j/web3j/releases</ulink>
			</para>
			<screen>
			<![CDATA[
wget https://github.com/web3j/web3j/releases/download/v3.2.0/web3j-3.2.0.zip
unzip web3j-3.2.0.zip

$ ./web3j-3.2.0/bin/web3j

              _      _____ _     _
             | |    |____ (_)   (_)
__      _____| |__      / /_     _   ___
\ \ /\ / / _ \ '_ \     \ \ |   | | / _ \
 \ V  V /  __/ |_) |.___/ / | _ | || (_) |
  \_/\_/ \___|_.__/ \____/| |(_)|_| \___/
                         _/ |
                        |__/

Usage: web3j version|wallet|solidity ...
			]]>
			</screen>
		</section>
	</section>
	<section id="web3j.geth">
		<title>启动以太坊</title>

		<para>首先启动服务</para>
		<screen>
		<![CDATA[
neo@netkiller ~ % geth --networkid 123456 --rpc --rpcaddr="0.0.0.0" --rpccorsdomain "*" --nodiscover 
INFO [02-01|23:35:12] Starting peer-to-peer node               instance=Geth/v1.7.3-stable-4bb3c89d/linux-amd64/go1.9.1
INFO [02-01|23:35:12] Allocated cache and file handles         database=/home/neo/.ethereum/geth/chaindata cache=128 handles=1024
INFO [02-01|23:35:12] Initialised chain configuration          config="{ChainID: 15 Homestead: 0 DAO: <nil> DAOSupport: false EIP150: <nil> EIP155: 0 EIP158: 0 Byzantium: <nil> Engine: unknown}"
INFO [02-01|23:35:12] Disk storage enabled for ethash caches   dir=/home/neo/.ethereum/geth/ethash count=3
INFO [02-01|23:35:12] Disk storage enabled for ethash DAGs     dir=/home/neo/.ethash               count=2
INFO [02-01|23:35:12] Initialising Ethereum protocol           versions="[63 62]" network=123456
INFO [02-01|23:35:12] Loaded most recent local header          number=719 hash=61330b…82786e td=108754979
INFO [02-01|23:35:12] Loaded most recent local full block      number=719 hash=61330b…82786e td=108754979
INFO [02-01|23:35:12] Loaded most recent local fast block      number=719 hash=61330b…82786e td=108754979
INFO [02-01|23:35:12] Loaded local transaction journal         transactions=0 dropped=0
INFO [02-01|23:35:12] Regenerated local transaction journal    transactions=0 accounts=0
WARN [02-01|23:35:12] Blockchain not empty, fast sync disabled 
INFO [02-01|23:35:12] Starting P2P networking 
INFO [02-01|23:35:12] RLPx listener up                         self="enode://9f6490ffb5236f2ddc5710ae73d47c740e0a3644bbd2d67029cf4a6c4693d2f470b642fd2cc3507f7e851df60aaeb730a1270b7a477f91ec5b6b17a8a4b40527@[::]:30303?discport=0"
INFO [02-01|23:35:12] IPC endpoint opened: /home/neo/.ethereum/geth.ipc 
INFO [02-01|23:35:12] HTTP endpoint opened: http://0.0.0.0:8545 
INFO [02-01|23:35:15] Mapped network port                      proto=tcp extport=30303 intport=30303 interface="UPNP IGDv1-IP1"		
		]]>
		</screen>
		<para>Web3j 将使用这个地址连接 HTTP endpoint opened:
			http://your_ip_address:8545
		</para>
	</section>
	<section id="web3j.pom.xml">
		<title>Maven pom.xml 文件</title>
		<screen>
		<![CDATA[
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>cn.netkiller</groupId>
	<artifactId>ethereum</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>ethereum</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.web3j</groupId>
			<artifactId>core</artifactId>
			<version>3.2.0</version>
		</dependency>
	</dependencies>
</project>
			
		]]>
		</screen>
	</section>
	<section id="web3j.type">
		<title>Java 与 Solidity 数据类型映射关系</title>
		<screen>
		<![CDATA[
boolean -> bool
BigInteger -> uint/int
byte[] -> bytes
String -> string and address types
List<> -> dynamic/static array			
		]]>
		</screen>
	</section>
	<section id="web3j.connect">
		<title>连接到服务器获取版本号</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.ethereum;

import java.io.IOException;

import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.Web3ClientVersion;
import org.web3j.protocol.http.HttpService;

public class Web3JClient {
	// TODO Auto-generated method stub

	public static void main(String[] args) {
		String url = "http://172.16.0.1:8545/";
		Web3j web3j = Web3j.build(new HttpService(url)); // defaults to http://localhost:8545/

		try {
			Web3ClientVersion web3ClientVersion = web3j.web3ClientVersion().send();
			String clientVersion = web3ClientVersion.getWeb3ClientVersion();
			System.out.println(clientVersion);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
		]]>
		</programlisting>
		<para>运行结果</para>
		<screen>
		<![CDATA[
Geth/v1.7.3-stable-4bb3c89d/linux-amd64/go1.9.1			
		]]>
		</screen>
		<para>除了 TCP 方式连接，还支持 IPC 方式。这种方式比较少用，可以使用 localhost 替代。</para>
		<programlisting>
		<![CDATA[
// OS X/Linux/Unix:
Web3j web3 = Web3j.build(new UnixIpcService("/path/to/socketfile"));
...

// Windows
Web3j web3 = Web3j.build(new WindowsIpcService("/path/to/namedpipefile"));
...			
		]]>
		</programlisting>
	</section>
	<section id="web3j.account">
		<title>账号管理</title>
		<section>
			<title>获得账号列表</title>
			<programlisting>
			<![CDATA[
	public List<String> getAccountlist() {

		try {
			return web3j.ethAccounts().send().getAccounts();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}				
			]]>
			</programlisting>
		</section>
		<section>
			<title>获得账号信息</title>
			<programlisting>
			<![CDATA[
	public String getAccount(int index) {
		String account = null;

		try {
			account = web3j.ethAccounts().send().getAccounts().get(index);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return account;
	}				
			]]>

			</programlisting>
		</section>

		<section id="web3j.personalUnlockAccount">
			<title>解锁账号</title>
			<programlisting>
			<![CDATA[
Admin web3j = Admin.build(new HttpService());  // defaults to http://localhost:8545/
PersonalUnlockAccount personalUnlockAccount = web3j.personalUnlockAccount("0x000...", "a password").sendAsync().get();
if (personalUnlockAccount.accountUnlocked()) {
    // send a transaction
}				
			]]>
			</programlisting>
		</section>

		<section id="web3j.account.example">
			<title>例子</title>
		</section>
	</section>
	<section id="web3j.credentials">
		<title>Credentials</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.ethereum.credentials;

import java.io.IOException;
import java.math.BigInteger;

import org.web3j.crypto.Credentials;
import org.web3j.crypto.ECKeyPair;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.http.HttpService;

public class CredentialsTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String url = "http://172.16.0.1:8545/";
		Web3j web3j = Web3j.build(new HttpService(url)); // defaults to http://localhost:8545/

		try {
			String account = web3j.ethAccounts().send().getAccounts().get(0);
			Credentials credentials = Credentials.create(account);
			ECKeyPair keyPair = credentials.getEcKeyPair();
			BigInteger privateKey = keyPair.getPrivateKey();
			BigInteger publicKey = keyPair.getPublicKey();

			System.out.println(privateKey);
			System.out.println("---");
			System.out.println(publicKey);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
			
		]]>
		</programlisting>
	</section>
	<section id="web3j.transaction">
		<title>交易</title>
		<section>
			<title>获取余额</title>
			<programlisting>
			<![CDATA[
	public BigInteger getBalance(String account) throws IOException {

		EthGetBalance ethGetBalance = web3j.ethGetBalance(account, DefaultBlockParameterName.LATEST).send();
		BigInteger balance = ethGetBalance.getBalance();
		return balance;

	}				
			]]>
			</programlisting>
		</section>
		<section>
			<title>转账</title>
			<programlisting>
			<![CDATA[
	public void transfer(String account, float coin)
			throws InterruptedException, IOException, TransactionException, Exception {
		String password = "";
		String walletfile = "/Users/neo/netkiller/UTC--2018-01-20T04-04-06.786586541Z--83fda0ba7e6cfa8d7319d78fa0e6b753a2bcb5a6";
		Credentials credentials = WalletUtils.loadCredentials(password, walletfile);
		TransactionReceipt transactionReceipt = Transfer
				.sendFunds(web3j, credentials, account, BigDecimal.valueOf(coin), Unit.ETHER).send();
		System.out.println(transactionReceipt.getStatus());
	}
			]]>
			</programlisting>
		</section>
		<section>
			<title>交易结果查询</title>
			<programlisting>
			<![CDATA[
EthTransaction transaction = web3.ethGetTransactionByHash("TRANSACTION_HASH")
                                   .sendAsync().get();
System.out.println(transaction.getResult());				
			]]>
			</programlisting>
		</section>
	</section>
	<section id="web3j.walletutils">
		<title>钱包</title>
		<section id="WalletUtils.generateFullNewWalletFile">
			<title>创建钱包</title>
			<programlisting>
			<![CDATA[
package cn.netkiller.ethereum.wallet;

import java.io.File;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;

import org.web3j.crypto.CipherException;
import org.web3j.crypto.WalletUtils;

public class WalletMain {

	public void createWallet() throws NoSuchAlgorithmException, NoSuchProviderException,
			InvalidAlgorithmParameterException, CipherException, IOException {

		File file = new File("/tmp/ethereum/keystore");
		String password = "passw0rd";
		String fileName = WalletUtils.generateFullNewWalletFile(password, file);
		System.out.println(fileName);

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		WalletMain wallet = new WalletMain();
		try {
			wallet.createWallet();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}
				
			]]>
			</programlisting>
			<para>运行结果</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~ % mkdir -p /tmp/ethereum/keystore
neo@MacBook-Pro ~ % ll /tmp/ethereum/keystore
total 8
-rw-r--r--  1 neo  wheel   491B Feb  4 18:30 UTC--2018-02-04T10-30-58.476000000Z--75d01e920d6e018445dae504058ce4d968fd2a58.json

neo@MacBook-Pro ~ % cat /tmp/ethereum/keystore/UTC--2018-02-04T10-30-58.476000000Z--75d01e920d6e018445dae504058ce4d968fd2a58.json 
{"address":"75d01e920d6e018445dae504058ce4d968fd2a58","id":"80700448-69bc-475a-aaf9-f2b836f17b13","version":3,"crypto":{"cipher":"aes-128-ctr","ciphertext":"fe86f5dbd61d15d092f9d6870e70bff7ed99a7925703ea71eef23669c8e3ec62","cipherparams":{"iv":"d058819ab660cd062080b405591ba143"},"kdf":"scrypt","kdfparams":{"dklen":32,"n":262144,"p":1,"r":8,"salt":"f69c535137b08667dbac53b8001313f5b43f81fce67a5d0e94b518c97d212d14"},"mac":"c247e34760bc838c3a4c8b2da286ccc6acec244bbc13fc6cc9ce28e88a7319d5"}}
			]]>
			</screen>
		</section>
		<section id="WalletUtils.loadCredentials">
			<title>从钱包取出账号</title>
			<programlisting>
			<![CDATA[
package cn.netkiller.ethereum.wallet;

import java.io.File;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;

import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;

public class WalletMain {

	public void walletAddress() throws IOException, CipherException {

		File file = new File(
				"/tmp/ethereum/keystore/UTC--2018-02-04T10-43-27.339000000Z--7cab470df532710d13078c5cdc0812a27f70cf51.json");
		String password = "passw0rd";
		Credentials credentials = WalletUtils.loadCredentials(password, file);
		System.out.println(credentials.getAddress());

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		WalletMain wallet = new WalletMain();
		try {
			wallet.walletAddress();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}
			]]>
			</programlisting>
			<para>运行结果</para>
			<screen>
			<![CDATA[
0x7cab470df532710d13078c5cdc0812a27f70cf51				
			]]>
			</screen>

		</section>
	</section>
	<section id="web3j.contract">
		<title>智能合约</title>
		<programlisting>
		<![CDATA[
neo@netkiller ~/ethereum/solidity % cat netkiller.sol 
pragma solidity ^0.4.18;

contract Netkiller {
    string name;
    int num;
    function Netkiller() public{
        name = "default";
        num = 1;
    }
    function setName(string _name) public{
        name = _name;
    }
    function getName() public view returns(string){
        return name;
    }
    function setNum(int n) public{
        num = n;
    }
    function addNum(int m) public view returns(int res){
        res = m + num;
    }
}

		]]>
		</programlisting>
		<para>编译智能合约</para>
		<screen>
		<![CDATA[
$ solc /path/to/<smart-contract>.sol --bin --abi --optimize -o output/
$ web3j solidity generate /path/to/<smart-contract>.bin /path/to/<smart-contract>.abi -o /path/to/src/main/java -p com.your.organisation.name			
		]]>
		</screen>
		<screen>
		<![CDATA[
$ solc netkiller.sol --bin --abi --optimize -o output/
$ web3j solidity generate output/Netkiller.bin output/Netkiller.abi -p cn.netkiller.ethereum.contract -o java

              _      _____ _     _        
             | |    |____ (_)   (_)       
__      _____| |__      / /_     _   ___  
\ \ /\ / / _ \ '_ \     \ \ |   | | / _ \ 
 \ V  V /  __/ |_) |.___/ / | _ | || (_) |
  \_/\_/ \___|_.__/ \____/| |(_)|_| \___/ 
                         _/ |             
                        |__/              

Generating cn.netkiller.ethereum.contract.Netkiller ... File written to java	

neo@netkiller ~/ethereum/solidity % ll java/cn/netkiller/ethereum/contract/Netkiller.java 
-rw-rw-r-- 1 neo neo 5.9K Feb  3 23:02 java/cn/netkiller/ethereum/contract/Netkiller.java
		]]>
		</screen>
		<para>启动以太坊，并开始挖矿。注意参数 --mine --minerthreads 1 ，你也可以启动后在JavaScript
			控制台钟启动挖矿。</para>
		<screen>
		<![CDATA[
neo@netkiller ~ % geth --networkid 123456 --rpc --rpcaddr="0.0.0.0" --rpccorsdomain "*" --mine --minerthreads 1	
		]]>
		</screen>
		<programlisting>
		<![CDATA[
package cn.netkiller.ethereum;

import java.math.BigInteger;

import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.Contract;
import org.web3j.tx.ManagedTransaction;

import cn.netkiller.ethereum.contract.Netkiller;

public class ContractTest {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub

		String walletfile = "/Users/neo/Downloads/UTC--2018-01-20T04-04-06.786586541Z--83fda0ba7e6cfa8d7319d78fa0e6b753a2bcb5a6";

		Web3j web3j = Web3j.build(new HttpService("http://172.16.0.1:8545"));
		Credentials credentials = WalletUtils.loadCredentials("", walletfile);

		Netkiller contract = Netkiller.deploy(web3j, credentials, ManagedTransaction.GAS_PRICE, Contract.GAS_LIMIT).send();

		System.out.println(contract.isValid());
		if (contract.isValid()) {
			System.out.println("---");
			String contractAddress = contract.getContractAddress();
			System.out.println(contractAddress);
			System.out.println("---");
			String result = contract.getName().send();
			System.out.println(result);

			contract.setName("Netkiller").send();
			System.out.println(contract.getName().send());
			System.out.println("---");
			contract.setNum(BigInteger.valueOf(8)).send();
			System.out.println(contract.addNum(BigInteger.valueOf(8)).send());
			System.out.println("---");
		} else {
			System.out.println("Deploy ERROR !!!");
		}
	}

}
		
		]]>
		</programlisting>
		<para>运行结果</para>
		<screen>
		<![CDATA[
true
---
0xef872f1b344a4b7c765c7d765a3cc82b741777a9
---
default
Netkiller
---
16
---
		]]>
		</screen>
		<para>在程序运行是，去看 geth 打印的日志，有如下记录打印</para>
		<screen>
		<![CDATA[
INFO [02-04|00:04:43] Submitted transaction                    fullhash=0x9f70ccb600294d2dd6dda08d090362131b107d42a692f27dd4a3b7548dbaf22c recipient=0xEF872F1b344a4B7C765c7D765a3cC82b741777a9			
		]]>
		</screen>
		<section id="contract.load">
			<title>载入合约</title>
			<programlisting>
			<![CDATA[
HelloWorld contract = HelloWorld.load(contractAddress,web3j,credentials, ManagedTransaction.GAS_PRICE, Contract.GAS_LIMIT);				
			]]>
			</programlisting>
			<screen>
			<![CDATA[]]>
			</screen>
		</section>
	</section>

</chapter>
<chapter id="web3.py">
	<title>web3.py - A python interface for interacting with the Ethereum
		blockchain and ecosystem.
	</title>
	<para>
			文档地址
			<ulink url="http://web3py.readthedocs.io/">http://web3py.readthedocs.io/</ulink>
	</para>

</chapter>
